2. написать функцию бинарного поиска элемента в отсортированном массиве (рекурсивно)
	/*
		description	:
		input		:	ar -- массив, sizeAr -- размер массива, el -- элемент который надо найти
		output		:	пара чисел - 
							1.	индекс элемента 
							2.	сколько раз была вызвана функция поиска
		date		:
		author		:
	*/
	std::pair<int/*index el*/,int /*count call*/> binSearch(int* ar, int sizeAr, int el);
	
3. реализовать класс стек FILO
	template<class T>
	class Filo {
		private :
			T* ar;	//массив
			int size;	//размер массива
			int countData;	//число элементов в массиве
		public :
			Filo();
			Filo(int _size);
			~Filo();
			/*
				input		:	элемент который надо добавить
				output		:	1 - элемент добавлен, 0 - элемент не добавлен
				description	:	добавление элемента в конец массива				
			*/
			int push_back(T el);
			/*
				input		:	элемент который надо извлечь
				output		:	пара значений: 
									1ый аргумент пары -- 1 - элемент успешно извлечён, 0 - элементов в массиве нет
									2ой аргумент пары -- это извлечённый элемент
				description	:	извлечение элемента из массива
			*/
			pair<int,T> pop_back();
	}
	
4. переопределить оператор <<, так, чтобы можно было выводить на экран пару вида pair<int, T>, в следующем формате "(" [pair<int, T>.first] ", " [pair<int, T>.second] ")\n",
	пример:
	std::pair<int, int> testP = std::make_pair<int,int>(10,11);
	вывод на экран будет следующим: (10, 11)\n

5. на основе реализованного класса в задаче 3, определить присутствуют ли в строчке все пары открывающих и закрывающих скобок, к примеру
	строка {(){}[(())]} имеет все пары - всё хорошо
	строка (()[]{}{()}{[[[]]]}) - всё хорошо
	строка {[[[]}]} у одной скобки не хватает пары - ошибка 
	строка {{（}）} - ошибка

	template<class T>
	class CheckBrackets : public Filo<char> {
	private:
		//можно объявлять любые переменные и функции
	public :
		CheckBrackets() : Filo<char>() { }
		~CheckBrackets() {}
		
		/*
			input		:	строка со скобками
			output		:	0 - всё хорошо, -1 - скобок не хватает
			description	:	проверка скобок, 
		*/
		int checkBrackets(const char* strBrackets);
	};
			
			
		 